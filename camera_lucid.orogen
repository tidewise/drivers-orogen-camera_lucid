name "camera_lucid"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
import_types_from "camera_lucidTypes.hpp"
# Finally, it is pretty common that headers are directly loaded from an external
# library. In this case, the library must be first used (the name is the
# library's pkg-config name) and then the header can be used. Following Rock
# conventions, a common use-case would be:
#
using_library "camera_lucid_arenasdk"
# import_types_from "camera_lucid_arenasdk"
# import_types_from "camera_lucid/CustomType.hpp"

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
import_types_from "std"
import_types_from "base"

task_context "Task" do
    needs_configuration

    # Camera's IP
    property "ip", "/std/string"

    property "camera_reset_timeout", "base/Time"

    # Binning Configuration:
    # columns and/or rows of pixels are combined to achieve a reduced overall image size
    # without changing the image's field of view. This feature may result in an increase
    # of camera s frame rate.
    property "binning_config", "camera_lucid/BinningConfig"

    # Decimation Configuration:
    # columns and/or rows of pixel are skipped to achieve reduced overall image size
    # without changing the image's field of view. This feature is also known as
    # "subsampling" due to the smaller sample size of pixels the camera transmits. This
    # feature may result in an increase of camera's frame rate.
    property "decimation_config", "camera_lucid/DecimationConfig"

    # Image Configuration
    property "image_config", "camera_lucid/ImageConfig"

    output_port "frame", ro_ptr("base/samples/frame/Frame")
    periodic 0.1
end
